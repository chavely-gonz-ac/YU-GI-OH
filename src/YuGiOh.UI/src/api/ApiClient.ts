//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export interface IApiClient {

    /**
     * @param body (optional) 
     * @return OK
     */
    login(body?: AuthenticateCommand | undefined): Promise<void>;

    /**
     * @return OK
     */
    refresh(): Promise<void>;

    /**
     * @return OK
     */
    getCountries(): Promise<Country[]>;

    /**
     * @return OK
     */
    getStates(countryIso2: string): Promise<State[]>;

    /**
     * @return OK
     */
    getCities(countryIso2: string, stateIso2: string): Promise<City[]>;

    /**
     * @return OK
     */
    getStreetTypes(): Promise<StreetType[]>;

    /**
     * @param body (optional) 
     * @return OK
     */
    register(body?: RegisterUserRequest | undefined): Promise<void>;

    /**
     * @param email (optional) 
     * @param token (optional) 
     * @return OK
     */
    confirmEmail(email?: string | undefined, token?: string | undefined): Promise<void>;
}

export class ApiClient implements IApiClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

constructor(
  baseUrl?: string,
  http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }
) {
  this.http = http ?? { fetch: (url, init) => globalThis.fetch(url, init) };
  this.baseUrl = baseUrl ?? "";
}

    /**
     * @param body (optional) 
     * @return OK
     */
    login(body?: AuthenticateCommand | undefined, signal?: AbortSignal | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Authentication/login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            signal,
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLogin(_response);
        });
    }

    protected processLogin(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    refresh(signal?: AbortSignal | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Authentication/refresh";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            signal,
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRefresh(_response);
        });
    }

    protected processRefresh(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    getCountries(signal?: AbortSignal | undefined): Promise<Country[]> {
        let url_ = this.baseUrl + "/api/CSC/GetCountries";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            signal,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCountries(_response);
        });
    }

    protected processGetCountries(response: Response): Promise<Country[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Country.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Country[]>(null as any);
    }

    /**
     * @return OK
     */
    getStates(countryIso2: string, signal?: AbortSignal | undefined): Promise<State[]> {
        let url_ = this.baseUrl + "/api/CSC/GetStates/{countryIso2}";
        if (countryIso2 === undefined || countryIso2 === null)
            throw new Error("The parameter 'countryIso2' must be defined.");
        url_ = url_.replace("{countryIso2}", encodeURIComponent("" + countryIso2));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            signal,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetStates(_response);
        });
    }

    protected processGetStates(response: Response): Promise<State[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(State.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<State[]>(null as any);
    }

    /**
     * @return OK
     */
    getCities(countryIso2: string, stateIso2: string, signal?: AbortSignal | undefined): Promise<City[]> {
        let url_ = this.baseUrl + "/api/CSC/GetCities/{countryIso2}/{stateIso2}";
        if (countryIso2 === undefined || countryIso2 === null)
            throw new Error("The parameter 'countryIso2' must be defined.");
        url_ = url_.replace("{countryIso2}", encodeURIComponent("" + countryIso2));
        if (stateIso2 === undefined || stateIso2 === null)
            throw new Error("The parameter 'stateIso2' must be defined.");
        url_ = url_.replace("{stateIso2}", encodeURIComponent("" + stateIso2));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            signal,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCities(_response);
        });
    }

    protected processGetCities(response: Response): Promise<City[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(City.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<City[]>(null as any);
    }

    /**
     * @return OK
     */
    getStreetTypes(signal?: AbortSignal | undefined): Promise<StreetType[]> {
        let url_ = this.baseUrl + "/api/CSC/GetStreetTypes";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            signal,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetStreetTypes(_response);
        });
    }

    protected processGetStreetTypes(response: Response): Promise<StreetType[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(StreetType.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<StreetType[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    register(body?: RegisterUserRequest | undefined, signal?: AbortSignal | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Register/Register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            signal,
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRegister(_response);
        });
    }

    protected processRegister(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param email (optional) 
     * @param token (optional) 
     * @return OK
     */
    confirmEmail(email?: string | undefined, token?: string | undefined, signal?: AbortSignal | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Register/ConfirmEmail?";
        if (email === null)
            throw new Error("The parameter 'email' cannot be null.");
        else if (email !== undefined)
            url_ += "email=" + encodeURIComponent("" + email) + "&";
        if (token === null)
            throw new Error("The parameter 'token' cannot be null.");
        else if (token !== undefined)
            url_ += "token=" + encodeURIComponent("" + token) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            signal,
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processConfirmEmail(_response);
        });
    }

    protected processConfirmEmail(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export class Address implements IAddress {
    id?: number;
    countryIso2?: string | undefined;
    stateIso2?: string | undefined;
    cityIso2?: string | undefined;
    streetTypeId?: number;
    streetType?: StreetType;
    streetName?: string | undefined;
    buildingName?: string | undefined;
    apartment?: string | undefined;

    constructor(data?: IAddress) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"];
            this.countryIso2 = _data["CountryIso2"];
            this.stateIso2 = _data["StateIso2"];
            this.cityIso2 = _data["CityIso2"];
            this.streetTypeId = _data["StreetTypeId"];
            this.streetType = _data["StreetType"] ? StreetType.fromJS(_data["StreetType"]) : <any>undefined;
            this.streetName = _data["StreetName"];
            this.buildingName = _data["BuildingName"];
            this.apartment = _data["Apartment"];
        }
    }

    static fromJS(data: any): Address {
        data = typeof data === 'object' ? data : {};
        let result = new Address();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["CountryIso2"] = this.countryIso2;
        data["StateIso2"] = this.stateIso2;
        data["CityIso2"] = this.cityIso2;
        data["StreetTypeId"] = this.streetTypeId;
        data["StreetType"] = this.streetType ? this.streetType.toJSON() : <any>undefined;
        data["StreetName"] = this.streetName;
        data["BuildingName"] = this.buildingName;
        data["Apartment"] = this.apartment;
        return data;
    }
}

export interface IAddress {
    id?: number;
    countryIso2?: string | undefined;
    stateIso2?: string | undefined;
    cityIso2?: string | undefined;
    streetTypeId?: number;
    streetType?: StreetType;
    streetName?: string | undefined;
    buildingName?: string | undefined;
    apartment?: string | undefined;
}

export class AuthenticateCommand implements IAuthenticateCommand {
    handler?: string | undefined;
    password?: string | undefined;
    ipAddress?: string | undefined;

    constructor(data?: IAuthenticateCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.handler = _data["Handler"];
            this.password = _data["Password"];
            this.ipAddress = _data["IpAddress"];
        }
    }

    static fromJS(data: any): AuthenticateCommand {
        data = typeof data === 'object' ? data : {};
        let result = new AuthenticateCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Handler"] = this.handler;
        data["Password"] = this.password;
        data["IpAddress"] = this.ipAddress;
        return data;
    }
}

export interface IAuthenticateCommand {
    handler?: string | undefined;
    password?: string | undefined;
    ipAddress?: string | undefined;
}

export class City implements ICity {
    name?: string | undefined;
    stateIso2?: string | undefined;
    countryIso2?: string | undefined;

    constructor(data?: ICity) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["Name"];
            this.stateIso2 = _data["StateIso2"];
            this.countryIso2 = _data["CountryIso2"];
        }
    }

    static fromJS(data: any): City {
        data = typeof data === 'object' ? data : {};
        let result = new City();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Name"] = this.name;
        data["StateIso2"] = this.stateIso2;
        data["CountryIso2"] = this.countryIso2;
        return data;
    }
}

export interface ICity {
    name?: string | undefined;
    stateIso2?: string | undefined;
    countryIso2?: string | undefined;
}

export class Country implements ICountry {
    iso2?: string | undefined;
    name?: string | undefined;

    constructor(data?: ICountry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.iso2 = _data["Iso2"];
            this.name = _data["Name"];
        }
    }

    static fromJS(data: any): Country {
        data = typeof data === 'object' ? data : {};
        let result = new Country();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Iso2"] = this.iso2;
        data["Name"] = this.name;
        return data;
    }
}

export interface ICountry {
    iso2?: string | undefined;
    name?: string | undefined;
}

export class ProblemDetails implements IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    [key: string]: any;

    constructor(data?: IProblemDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.type = _data["type"];
            this.title = _data["title"];
            this.status = _data["status"];
            this.detail = _data["detail"];
            this.instance = _data["instance"];
        }
    }

    static fromJS(data: any): ProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        return data;
    }
}

export interface IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    [key: string]: any;
}

export class RegisterUserRequest implements IRegisterUserRequest {
    email?: string | undefined;
    password?: string | undefined;
    firstName?: string | undefined;
    middleName?: string | undefined;
    firstSurname?: string | undefined;
    secondSurname?: string | undefined;
    readonly fullName?: string | undefined;
    roles?: string[] | undefined;
    address?: Address;
    iBAN?: string | undefined;

    constructor(data?: IRegisterUserRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["Email"];
            this.password = _data["Password"];
            this.firstName = _data["FirstName"];
            this.middleName = _data["MiddleName"];
            this.firstSurname = _data["FirstSurname"];
            this.secondSurname = _data["SecondSurname"];
            (<any>this).fullName = _data["FullName"];
            if (Array.isArray(_data["Roles"])) {
                this.roles = [] as any;
                for (let item of _data["Roles"])
                    this.roles!.push(item);
            }
            this.address = _data["Address"] ? Address.fromJS(_data["Address"]) : <any>undefined;
            this.iBAN = _data["IBAN"];
        }
    }

    static fromJS(data: any): RegisterUserRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterUserRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Email"] = this.email;
        data["Password"] = this.password;
        data["FirstName"] = this.firstName;
        data["MiddleName"] = this.middleName;
        data["FirstSurname"] = this.firstSurname;
        data["SecondSurname"] = this.secondSurname;
        data["FullName"] = this.fullName;
        if (Array.isArray(this.roles)) {
            data["Roles"] = [];
            for (let item of this.roles)
                data["Roles"].push(item);
        }
        data["Address"] = this.address ? this.address.toJSON() : <any>undefined;
        data["IBAN"] = this.iBAN;
        return data;
    }
}

export interface IRegisterUserRequest {
    email?: string | undefined;
    password?: string | undefined;
    firstName?: string | undefined;
    middleName?: string | undefined;
    firstSurname?: string | undefined;
    secondSurname?: string | undefined;
    fullName?: string | undefined;
    roles?: string[] | undefined;
    address?: Address;
    iBAN?: string | undefined;
}

export class State implements IState {
    iso2?: string | undefined;
    name?: string | undefined;
    countryIso2?: string | undefined;

    constructor(data?: IState) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.iso2 = _data["Iso2"];
            this.name = _data["Name"];
            this.countryIso2 = _data["CountryIso2"];
        }
    }

    static fromJS(data: any): State {
        data = typeof data === 'object' ? data : {};
        let result = new State();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Iso2"] = this.iso2;
        data["Name"] = this.name;
        data["CountryIso2"] = this.countryIso2;
        return data;
    }
}

export interface IState {
    iso2?: string | undefined;
    name?: string | undefined;
    countryIso2?: string | undefined;
}

export class StreetType implements IStreetType {
    id?: number;
    name?: string | undefined;

    constructor(data?: IStreetType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"];
            this.name = _data["Name"];
        }
    }

    static fromJS(data: any): StreetType {
        data = typeof data === 'object' ? data : {};
        let result = new StreetType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["Name"] = this.name;
        return data;
    }
}

export interface IStreetType {
    id?: number;
    name?: string | undefined;
}

export class SwaggerException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    throw new SwaggerException(message, status, response, headers, result);
}