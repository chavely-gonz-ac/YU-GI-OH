//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class ApiClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
  this.http = http ? http : { fetch: globalThis.fetch.bind(globalThis) }; // safe in SSR + CSR
  this.baseUrl = baseUrl ?? "";
}


    /**
     * @param body (optional) 
     * @return OK
     */
    register(body: RegisterUserRequest | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Auth/Register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRegister(_response);
        });
    }

    protected processRegister(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param email (optional) 
     * @param token (optional) 
     * @return OK
     */
    confirmEmail(email: string | undefined, token: string | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Auth/ConfirmEmail?";
        if (email === null)
            throw new Error("The parameter 'email' cannot be null.");
        else if (email !== undefined)
            url_ += "email=" + encodeURIComponent("" + email) + "&";
        if (token === null)
            throw new Error("The parameter 'token' cannot be null.");
        else if (token !== undefined)
            url_ += "token=" + encodeURIComponent("" + token) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processConfirmEmail(_response);
        });
    }

    protected processConfirmEmail(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export class RegisterUserRequest implements IRegisterUserRequest {
    email?: string | undefined;
    password?: string | undefined;
    firstName?: string | undefined;
    middleName?: string | undefined;
    firstSurname?: string | undefined;
    secondSurname?: string | undefined;
    readonly fullName?: string | undefined;
    roles?: string[] | undefined;
    country?: number | undefined;
    region?: number | undefined;
    city?: number | undefined;
    streetType?: number | undefined;
    streetName?: string | undefined;
    building?: string | undefined;
    apartment?: string | undefined;
    iBAN?: string | undefined;

    constructor(data?: IRegisterUserRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["Email"];
            this.password = _data["Password"];
            this.firstName = _data["FirstName"];
            this.middleName = _data["MiddleName"];
            this.firstSurname = _data["FirstSurname"];
            this.secondSurname = _data["SecondSurname"];
            (<any>this).fullName = _data["FullName"];
            if (Array.isArray(_data["Roles"])) {
                this.roles = [] as any;
                for (let item of _data["Roles"])
                    this.roles!.push(item);
            }
            this.country = _data["Country"];
            this.region = _data["Region"];
            this.city = _data["City"];
            this.streetType = _data["StreetType"];
            this.streetName = _data["StreetName"];
            this.building = _data["Building"];
            this.apartment = _data["Apartment"];
            this.iBAN = _data["IBAN"];
        }
    }

    static fromJS(data: any): RegisterUserRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterUserRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Email"] = this.email;
        data["Password"] = this.password;
        data["FirstName"] = this.firstName;
        data["MiddleName"] = this.middleName;
        data["FirstSurname"] = this.firstSurname;
        data["SecondSurname"] = this.secondSurname;
        data["FullName"] = this.fullName;
        if (Array.isArray(this.roles)) {
            data["Roles"] = [];
            for (let item of this.roles)
                data["Roles"].push(item);
        }
        data["Country"] = this.country;
        data["Region"] = this.region;
        data["City"] = this.city;
        data["StreetType"] = this.streetType;
        data["StreetName"] = this.streetName;
        data["Building"] = this.building;
        data["Apartment"] = this.apartment;
        data["IBAN"] = this.iBAN;
        return data;
    }
}

export interface IRegisterUserRequest {
    email?: string | undefined;
    password?: string | undefined;
    firstName?: string | undefined;
    middleName?: string | undefined;
    firstSurname?: string | undefined;
    secondSurname?: string | undefined;
    fullName?: string | undefined;
    roles?: string[] | undefined;
    country?: number | undefined;
    region?: number | undefined;
    city?: number | undefined;
    streetType?: number | undefined;
    streetName?: string | undefined;
    building?: string | undefined;
    apartment?: string | undefined;
    iBAN?: string | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}